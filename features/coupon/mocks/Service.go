// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	coupon "user_barang/features/coupon"

	jwt "github.com/golang-jwt/jwt/v5"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DapatCoupon provides a mock function with given fields: token, page, limit
func (_m *Service) DapatCoupon(token *jwt.Token, page int, limit int) ([]coupon.Coupon, error) {
	ret := _m.Called(token, page, limit)

	var r0 []coupon.Coupon
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, int, int) ([]coupon.Coupon, error)); ok {
		return rf(token, page, limit)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, int, int) []coupon.Coupon); ok {
		r0 = rf(token, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]coupon.Coupon)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, int, int) error); ok {
		r1 = rf(token, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SemuaCoupon provides a mock function with given fields: page, limit
func (_m *Service) SemuaCoupon(page int, limit int) ([]coupon.Coupon, error) {
	ret := _m.Called(page, limit)

	var r0 []coupon.Coupon
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]coupon.Coupon, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []coupon.Coupon); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]coupon.Coupon)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TambahCoupon provides a mock function with given fields: token, newCoupon
func (_m *Service) TambahCoupon(token *jwt.Token, newCoupon coupon.Coupon) (coupon.Coupon, error) {
	ret := _m.Called(token, newCoupon)

	var r0 coupon.Coupon
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, coupon.Coupon) (coupon.Coupon, error)); ok {
		return rf(token, newCoupon)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, coupon.Coupon) coupon.Coupon); ok {
		r0 = rf(token, newCoupon)
	} else {
		r0 = ret.Get(0).(coupon.Coupon)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, coupon.Coupon) error); ok {
		r1 = rf(token, newCoupon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
